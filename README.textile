TNoodle is really a collection of projects. Each project can be treated as a full fledged Eclipse project (they each have a .classpath and .project file). Furthermore, the whole tnoodle directory can be opened as an Eclipse workspace. Simply go to File > Import > Existing Projects into Workspace, and enter your tnoodle directory under "Select root directory". Eclipse should automagically detect all the tnoodle projects.

TODO - git submodule init ?

* jcubeexplorer: A wrapper for Herbert Kociemba's excellent Java implementation of the 2-phase algorithm to save its tables to disk. This shaves the ~10 seconds normally spent starting up down to a fraction of a second. The original source is available here: http://kociemba.org/cube.htm

* scrambles: A Java scrambling suite. Java applications can use this project as a library, a perfect example of this is tnoodleserver.

* server: A basic, estensible webserver.

that serves up scrambles, scramble images, and tnoodletimer.

* stackmat: A Java library that parses a Stackmat plugged into an audio port.

* timer: A Javascript Rubik's Cube timer.

* tools: The location for utilities used to develop tnoodle.

* utils: Useful Java functions used throughout tnoodle.

Dependency graph (generated by running "tmt graph")

TODO - update grabh, output s queries, visit dnai:
<pre>
<code>
all
`-- timer
    |-- server
    |   |-- h2-1.2.147.jar
    |   |-- jopt-simple-3.2.jar
    |   `-- utils
    |       `-- gson-1.4.jar
    |-- stackmat
    |   `-- plugin.jar
    `-- scrambleserverplugin
        |-- iText-5.0.2.jar
        |-- server (seen)
        |-- scrambles
        |   |-- jcubeexplorer
        |   `-- utils (seen)
        `-- utils (seen)
</code>
</pre>

MAKE

* Should work & is easy for testing:
<pre><code>./tmt make run -p timer</code></pre>

* Should make a runnable jar under the "timer/dist" directory:
<pre><code>./tmt make dist -p timer</code></pre>
